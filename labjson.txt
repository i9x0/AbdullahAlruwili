

import Foundation
import SwiftUI

struct Azkar : Codable, Hashable{
    var category :String?
    var count :String?
    var description : String?
    var reference : String?
    var zekr :String?

}

class ViewModle : ObservableObject{
    @Published var rows = [Azkar]()
    init() {
        // Step 1
        guard let url = URL(string: "https://i9x0.github.io/AbdullahAlruwili/azkar.json")  else{return}

     
        // Step 2

        do{
            let requst  = try? URLSession.shared.dataTask(with: url, completionHandler: { data, res, err in
                if let Fdata = data{
                    let result = try? JSONDecoder().decode([Azkar].self, from: Fdata)
                    if let re = result{
                        self.rows = re
                    }
                }
            }).resume()



        }catch{
            print("catch error")
        }


    }
        
}
struct ContentView1: View {
    @ObservedObject var azkar = ViewModle()
    var body: some View {
        VStack {
        
                ScrollView{
                    ForEach(azkar.rows,id: \.self){ item in
                        Text(item.category ?? "null").padding()
                        Text(item.zekr ?? "").padding()
                    }
                }.task {
                    ViewModle()
                }
            
        }
        .padding()
    }
}

struct ContentView_Previews1: PreviewProvider {
    static var previews: some View {
        ContentView1()
    }
}



//import SwiftUI
//import Foundation
//
//
//struct User: Codable, Identifiable {
//    let id = UUID()
//    let username: String
//    let name: String
//}
//
//
//
//class apiCall {
//    func getUsers(completion:@escaping ([User]) -> ()) {
//        guard let url = URL(string: "https://jsonplaceholder.typicode.com/users") else { return }
//        URLSession.shared.dataTask(with: url) { (data, _, _) in
//            let users = try! JSONDecoder().decode([User].self, from: data!)
//            print(users)
//
//            DispatchQueue.main.async {
//                completion(users)
//            }
//        }
//        .resume()
//    }
//}

